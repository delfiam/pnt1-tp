{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang11274{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Cascadia Mono;}{\f2\fnil\fcharset0 Cascadia Mono;}}
{\colortbl ;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red0\green128\blue0;\red163\green21\blue21;\red128\green0\blue0;\red128\green0\blue128;\red255\green0\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang10 TicketController\par
\par
\cf1\highlight2\f1\fs19 using\cf3  System;\par
\cf1 using\cf3  System.Collections.Generic;\par
\cf1 using\cf3  System.Linq;\par
\cf1 using\cf3  System.Threading.Tasks;\par
\cf1 using\cf3  Microsoft.AspNetCore.Mvc;\par
\cf1 using\cf3  Microsoft.AspNetCore.Mvc.Rendering;\par
\cf1 using\cf3  Microsoft.EntityFrameworkCore;\par
\cf1 using\cf3  Turnera2.Models;\par
\par
\cf1 namespace\cf3  Turnera2.Controllers\par
\{\par
    \cf1 public\cf3  \cf1 class\cf3  \cf4 TicketsController\cf3  : \cf4 Controller\cf3\par
    \{\par
        \cf1 private\cf3  \cf1 readonly\cf3  \cf4 ClinicaContexto\cf3  _context;\par
\par
        \cf1 public\cf3  \cf4 TicketsController\cf3 (\cf4 ClinicaContexto\cf3  context)\par
        \{\par
            _context = context;\par
        \}\par
\par
        \cf5 // GET: Tickets\cf3\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Index()\par
        \{\par
            \cf1 var\cf3  tickets = _context.Tickets\par
                .Include(t => t.Medico)\par
                .Include(t => t.Paciente)\par
                .Select(t => \cf1 new\cf3  \cf4 TicketViewModel\cf3\par
                \{\par
                    TicketId = t.TicketId,\par
                    Fecha = t.Fecha,\par
                    EspecialString = t.Medico.Especialidad.ToString(),                \par
                    MedicoNombreCompleto = t.Medico.NombreCompleto, \par
                    PacienteNombreCompleto = t.Paciente.NombreCompleto \})\par
                .ToListAsync();\par
            \cf1 return\cf3  View(tickets);\par
        \}\par
\par
        \cf5 // GET: Tickets/Details/5\cf3\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Details(\cf1 int\cf3 ? id)\par
        \{\par
            \cf1 if\cf3  (id == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 var\cf3  ticket = \cf1 await\cf3  _context.Tickets\par
                .Include(t => t.Medico)\par
                .Include(t => t.Paciente)\par
                .FirstOrDefaultAsync(m => m.TicketId == id);\par
            \cf1 if\cf3  (ticket == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 return\cf3  View(ticket);\par
        \}\par
\par
        \cf5 // GET: Tickets/Create\cf3\par
        \cf1 public\cf3  \cf4 IActionResult\cf3  Create()\par
        \{\par
            ViewData[\cf6 "MedicoId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Medicos, \cf6 "MedicoId"\cf3 , \cf6 "MedicoId"\cf3 );\par
            ViewData[\cf6 "PacienteId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Pacientes, \cf6 "PacienteId"\cf3 , \cf6 "PacienteId"\cf3 );\par
            \cf1 return\cf3  View();\par
        \}\par
\par
        \cf5 // POST: Tickets/Create\cf3\par
        \cf5 // To protect from overposting attacks, enable the specific properties you want to bind to.\cf3\par
        \cf5 // For more details, see {{\field{\*\fldinst{HYPERLINK http://go.microsoft.com/fwlink/?LinkId=317598 }}{\fldrslt{http://go.microsoft.com/fwlink/?LinkId=317598\ul0\cf0}}}}\f1\fs19 .\cf3\par
        [\cf4 HttpPost\cf3 ]\par
        [\cf4 ValidateAntiForgeryToken\cf3 ]\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Create([\cf4 Bind\cf3 (\cf6 "TicketId,Fecha,MedicoId,PacienteId"\cf3 )] \cf4 Ticket\cf3  ticket)\par
        \{\par
            \cf1 if\cf3  (ModelState.IsValid)\par
            \{\par
                _context.Add(ticket);\par
                \cf1 await\cf3  _context.SaveChangesAsync();\par
                \cf1 return\cf3  RedirectToAction(\cf1 nameof\cf3 (Index));\par
            \}\par
            ViewData[\cf6 "MedicoId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Medicos, \cf6 "MedicoId"\cf3 , \cf6 "MedicoId"\cf3 , ticket.MedicoId);\par
            ViewData[\cf6 "PacienteId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Pacientes, \cf6 "PacienteId"\cf3 , \cf6 "PacienteId"\cf3 , ticket.PacienteId);\par
            \cf1 return\cf3  View(ticket);\par
        \}\par
\par
        \cf5 // GET: Tickets/Edit/5\cf3\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Edit(\cf1 int\cf3 ? id)\par
        \{\par
            \cf1 if\cf3  (id == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 var\cf3  ticket = \cf1 await\cf3  _context.Tickets.FindAsync(id);\par
            \cf1 if\cf3  (ticket == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
            ViewData[\cf6 "MedicoId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Medicos, \cf6 "MedicoId"\cf3 , \cf6 "MedicoId"\cf3 , ticket.MedicoId);\par
            ViewData[\cf6 "PacienteId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Pacientes, \cf6 "PacienteId"\cf3 , \cf6 "PacienteId"\cf3 , ticket.PacienteId);\par
            \cf1 return\cf3  View(ticket);\par
        \}\par
\par
        \cf5 // POST: Tickets/Edit/5\cf3\par
        \cf5 // To protect from overposting attacks, enable the specific properties you want to bind to.\cf3\par
        \cf5 // For more details, see {{\field{\*\fldinst{HYPERLINK http://go.microsoft.com/fwlink/?LinkId=317598 }}{\fldrslt{http://go.microsoft.com/fwlink/?LinkId=317598\ul0\cf0}}}}\f1\fs19 .\cf3\par
        [\cf4 HttpPost\cf3 ]\par
        [\cf4 ValidateAntiForgeryToken\cf3 ]\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Edit(\cf1 int\cf3  id, [\cf4 Bind\cf3 (\cf6 "TicketId,Fecha,MedicoId,PacienteId"\cf3 )] \cf4 Ticket\cf3  ticket)\par
        \{\par
            \cf1 if\cf3  (id != ticket.TicketId)\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 if\cf3  (ModelState.IsValid)\par
            \{\par
                \cf1 try\cf3\par
                \{\par
                    _context.Update(ticket);\par
                    \cf1 await\cf3  _context.SaveChangesAsync();\par
                \}\par
                \cf1 catch\cf3  (\cf4 DbUpdateConcurrencyException\cf3 )\par
                \{\par
                    \cf1 if\cf3  (!TicketExists(ticket.TicketId))\par
                    \{\par
                        \cf1 return\cf3  NotFound();\par
                    \}\par
                    \cf1 else\cf3\par
                    \{\par
                        \cf1 throw\cf3 ;\par
                    \}\par
                \}\par
                \cf1 return\cf3  RedirectToAction(\cf1 nameof\cf3 (Index));\par
            \}\par
            ViewData[\cf6 "MedicoId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Medicos, \cf6 "MedicoId"\cf3 , \cf6 "MedicoId"\cf3 , ticket.MedicoId);\par
            ViewData[\cf6 "PacienteId"\cf3 ] = \cf1 new\cf3  \cf4 SelectList\cf3 (_context.Pacientes, \cf6 "PacienteId"\cf3 , \cf6 "PacienteId"\cf3 , ticket.PacienteId);\par
            \cf1 return\cf3  View(ticket);\par
        \}\par
\par
        \cf5 // GET: Tickets/Delete/5\cf3\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > Delete(\cf1 int\cf3 ? id)\par
        \{\par
            \cf1 if\cf3  (id == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 var\cf3  ticket = \cf1 await\cf3  _context.Tickets\par
                .Include(t => t.Medico)\par
                .Include(t => t.Paciente)\par
                .FirstOrDefaultAsync(m => m.TicketId == id);\par
            \cf1 if\cf3  (ticket == \cf1 null\cf3 )\par
            \{\par
                \cf1 return\cf3  NotFound();\par
            \}\par
\par
            \cf1 return\cf3  View(ticket);\par
        \}\par
\par
        \cf5 // POST: Tickets/Delete/5\cf3\par
        [\cf4 HttpPost\cf3 , \cf4 ActionName\cf3 (\cf6 "Delete"\cf3 )]\par
        [\cf4 ValidateAntiForgeryToken\cf3 ]\par
        \cf1 public\cf3  \cf1 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > DeleteConfirmed(\cf1 int\cf3  id)\par
        \{\par
            \cf1 var\cf3  ticket = \cf1 await\cf3  _context.Tickets.FindAsync(id);\par
            \cf1 if\cf3  (ticket != \cf1 null\cf3 )\par
            \{\par
                _context.Tickets.Remove(ticket);\par
            \}\par
\par
            \cf1 await\cf3  _context.SaveChangesAsync();\par
            \cf1 return\cf3  RedirectToAction(\cf1 nameof\cf3 (Index));\par
        \}\par
\par
        \cf1 private\cf3  \cf1 bool\cf3  TicketExists(\cf1 int\cf3  id)\par
        \{\par
            \cf1 return\cf3  _context.Tickets.Any(e => e.TicketId == id);\par
        \}\par
    \}\par
\}\par
\par
\par
\par
\f2\lang11274 Views.Ticket.Index\f1\lang10\par
@model \cf4 IEnumerable\cf3 <Turnera2.Models.\cf4 TicketViewModel\cf3 >\par
\par
@\{\par
    ViewData[\cf6 "Title"\cf3 ] = \cf6 "Index"\cf3 ;\par
\}\par
\par
\cf1 <\cf7 h1\cf1 >\cf3 Index\cf1 </\cf7 h1\cf1 >\cf3\par
\par
\cf1 <\cf7 p\cf1 >\cf3\par
    \cf1 <\cf8\b a\cf3\b0  \cf8\b asp-action\cf1\b0 ="Create">\cf3 Create New\cf1 </\cf8\b a\cf1\b0 >\cf3\par
\cf1 </\cf7 p\cf1 >\cf3\par
\cf1 <\cf7 table\cf3  \cf9 class\cf1 ="table">\cf3  \par
    \cf1 <\cf7 thead\cf1 >\cf3  \par
        \cf1 <\cf7 tr\cf1 >\cf3  \par
            \cf1 <\cf7 th\cf1 >\cf3 Fecha\cf1 </\cf7 th\cf1 >\cf3  \par
            \cf1 <\cf7 th\cf1 >\cf3 Especialidad\cf1 </\cf7 th\cf1 >\cf3\par
            \cf1 <\cf7 th\cf1 >\cf3 Medico\cf1 </\cf7 th\cf1 >\cf3\par
            \cf1 <\cf7 th\cf1 >\cf3 Paciente\cf1 </\cf7 th\cf1 >\cf3  \par
        \cf1 </\cf7 tr\cf1 >\cf3  \par
    \cf1 </\cf7 thead\cf1 >\cf3  \par
    \par
    \cf1 <\cf7 tbody\cf1 >\cf3  \par
        @\cf1 foreach\cf3  (\cf1 var\cf3  item \cf1 in\cf3  Model) \par
        \{\par
            \cf1 <\cf7 tr\cf1 >\cf3  \par
                \cf1 <\cf7 td\cf1 >\cf3 @item.Fecha\cf1 </\cf7 td\cf1 >\cf3\par
                \cf1 <\cf7 td\cf1 >\cf3 @item.EspecialString\cf1 </\cf7 td\cf1 >\cf3\par
                \cf1 <\cf7 td\cf1 >\cf3 @item.MedicoNombreCompleto\cf1 </\cf7 td\cf1 >\cf3  \par
                \cf1 <\cf7 td\cf1 >\cf3 @item.PacienteNombreCompleto\cf1 </\cf7 td\cf1 >\cf3\par
                \cf1 <\cf7 td\cf1 >\cf3\par
                    \cf1 <\cf8\b a\cf3\b0  \cf8\b asp-action\cf1\b0 ="Edit"\cf3  \cf8\b asp-route-id\cf1\b0 ="\cf3 @item.TicketId\cf1 ">\cf3 Edit\cf1 </\cf8\b a\cf1\b0 >\cf3  |\par
                    \cf1 <\cf8\b a\cf3\b0  \cf8\b asp-action\cf1\b0 ="Details"\cf3  \cf8\b asp-route-id\cf1\b0 ="\cf3 @item.TicketId\cf1 ">\cf3 Details\cf1 </\cf8\b a\cf1\b0 >\cf3  |\par
                    \cf1 <\cf8\b a\cf3\b0  \cf8\b asp-action\cf1\b0 ="Delete"\cf3  \cf8\b asp-route-id\cf1\b0 ="\cf3 @item.TicketId\cf1 ">\cf3 Delete\cf1 </\cf8\b a\cf1\b0 >\cf3\par
                \cf1 </\cf7 td\cf1 >\cf3\par
            \cf1 </\cf7 tr\cf1 >\cf3\par
        \}\par
    \cf1 </\cf7 tbody\cf1 >\cf3\par
\cf1 </\cf7 table\cf1 >\cf0\highlight0\f0\fs22\par
}
 